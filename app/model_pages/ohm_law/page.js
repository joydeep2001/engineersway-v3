/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
"use client";

import React, { useRef, Suspense, useState, useEffect } from "react";
import {
  useGLTF,
  useAnimations,
  OrbitControls,
  Environment,
  PerspectiveCamera,
  useProgress,
  Html,
} from "@react-three/drei";
import { Canvas, useFrame } from "@react-three/fiber";
// import { proxy, useSnapshot } from "valtio";
import { useControls, folder } from "leva";
import ProgressLoader from "@/components/ProgressLoader";
import Pick from "@/components/Pick";

// const state = proxy({
//   items: {
//     // Table:'#b27300',
//     Bulb_glass: "#ffff56",
//   },
// });

const glbFileURL = `${process.env.NEXT_PUBLIC_S3_MODEL_BUCKET}/ohmlaw.gltf`;

function Model({ ...props }) {
  const group = useRef();
  const Switch = useRef();
  const Knob = useRef();
  const volt_wiper = useRef();
  const amp_wiper = useRef();
  const jockey = useRef();
  const bulb_light = useRef();
  const bulb = useRef();
  // const snap = useSnapshot(state);
  // const resistance_wire=useRef()

  const { nodes, materials } = useGLTF(glbFileURL);
  const { voltage, Current, On, Jockey_control, r_Size } = useControls({
    On: false,
    Jockey_control: {
      value: 2.38,
      min: 0,
      max: 2.38,
      step: 0.1,
    },
    // r_Size:{
    //   value:0,
    //   min:0,
    //   max:2,
    //   step:0.1
    // }
  });
  useEffect(() => {
    if (On == true) {
      Switch.current.rotation.x = 112;
      Knob.current.rotation.y = 25;
      amp_wiper.current.rotation.x = (Jockey_control + 3) / 7.5 - 0.2;
      volt_wiper.current.rotation.x = (Jockey_control - 3) / 10.5 - 0.881;
      bulb_light.current.intensity = 4 - Jockey_control;

      // if(volt_wiper.current.rotation.x<1.1952830188679244){
      //     console.log(0.95/volt_wiper.current.rotation.x)
      // }else{
      //   console.log(volt_wiper.current.rotation.x)
      // }
    } else if (On == false) {
      Switch.current.rotation.x = 69.3;
      Knob.current.rotation.y = -25.7;
      amp_wiper.current.rotation.x = 1;
      volt_wiper.current.rotation.x = 0.881;
      bulb_light.current.intensity = 0.5;
    }
  });
  return (
    <group ref={group} {...props} dispose={null}>
      {/* <group position={[7.52, 2.26, -7.51]}>
        <directionalLight intensity={0.5} decay={2} color="#ffdfdc" rotation={[-Math.PI / 2, 0, 0]} />
      </group> */}
      <group position={[3.77, 2.8, 6.2]}>
        <pointLight
          intensity={0.5}
          decay={2}
          rotation={[-Math.PI / 2, 0, 0]}
          ref={bulb_light}
        />
      </group>
      {/* <group position={[10.71, 2.7, -1.63]}>
        <directionalLight intensity={0.5} decay={2} color="#ffdfdc" rotation={[-Math.PI / 2, 0, 0]} />
      </group> */}
      <group position={[9.02, 5.81, -16.82]} rotation={[1.76, 0.16, -2.7]}>
        <PerspectiveCamera
          makeDefault={false}
          far={100}
          near={0.1}
          fov={22.9}
          rotation={[-Math.PI / 2, 0, 0]}
        />
      </group>
      <group position={[3.77, 1.48, 6.2]}>
        <pointLight intensity={1} decay={2} rotation={[-Math.PI / 2, 0, 0]} />
      </group>
      <mesh
        geometry={nodes.Stand.geometry}
        material={materials.Rheostat_stand}
        position={[0.08, 0.89, -2.59]}
        scale={[0.05, 1, 1]}
      />
      <mesh
        geometry={nodes.Slider_Stand.geometry}
        material={materials.Slider_Stand}
        position={[0.73, 1.88, -2.61]}
        scale={[0.09, 0.07, 0.05]}
      />
      <mesh
        geometry={nodes.SliderWiper_Terminal.geometry}
        material={materials.Terminal_03}
        position={[-2.23, 1.88, -2.61]}
        rotation={[Math.PI, 0, Math.PI / 2]}
        scale={0.09}
      />
      <mesh
        geometry={nodes.Object.geometry}
        material={nodes.Object.material}
        position={[0.14, 1.43, -2.58]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={0.28}
      />
      <mesh
        geometry={nodes.Coil_of_wire.geometry}
        material={materials.Coil_of_Wire}
        position={[0.04, 1.43, -2.58]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={0.29}
      />
      <mesh
        geometry={nodes.Terminal_Stand.geometry}
        material={materials["Holder.001"]}
        position={[0.11, 1.42, -2.59]}
        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
        scale={0.3}
      />
      <mesh
        geometry={nodes.Terminals.geometry}
        material={materials.Terminal}
        position={[0.05, 1.56, -2.93]}
        scale={0.05}
      />
      <mesh
        geometry={nodes.Termial_stand.geometry}
        material={nodes.Termial_stand.material}
        position={[0.05, 1.43, -2.57]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={0.29}
      />
      <group
        position={[1.2 - Jockey_control, 1.95, -2.6]}
        rotation={[0.6, 0, 0]}
        scale={[0.07, 0.04, 0.05]}
        ref={jockey}
      >
        <mesh
          geometry={nodes.Cube002_1.geometry}
          material={materials["wiper/jockey"]}
        />
        <mesh
          geometry={nodes.Cube002_2.geometry}
          material={materials["Wiper/jockey"]}
        />
      </group>
      <mesh
        geometry={nodes.Sphere.geometry}
        material={materials.Bulb_glass}
        position={[3.77, 2.95, 6.2]}
        scale={0.85}
        //materialColor={snap.items.Bulb_glass}
        ref={bulb}
      />
      <mesh
        geometry={nodes.Sphere001.geometry}
        material={materials.Lower_bulb}
        position={[3.77, 1.06, 6.2]}
        scale={0.85}
        //material-color={snap.items.Table}
      />
      <mesh
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[3.77, 1.06, 6.2]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.03, 0.45, 0.03]}
      />
      <mesh
        geometry={nodes.Cube.geometry}
        material={materials["  "]}
        position={[3.77, 2.27, 6.2]}
        scale={0.15}
      />
      <mesh
        geometry={nodes.BezierCurve.geometry}
        material={nodes.BezierCurve.material}
        position={[3.77, 2.67, 6.1]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={0.55}
      />
      <mesh
        geometry={nodes.BezierCurve001.geometry}
        material={nodes.BezierCurve001.material}
        position={[3.77, 2.78, 6.19]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={0.36}
      />
      <mesh
        geometry={nodes.Circle.geometry}
        material={materials.fillament}
        position={[3.78, 2.93, 6.23]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.01}
      />
      <mesh
        geometry={nodes.Circle001.geometry}
        material={nodes.Circle001.material}
        position={[3.77, 1.48, 6.2]}
        scale={0.41}
      />
      <mesh
        geometry={nodes.Circle002.geometry}
        material={materials.Holder}
        position={[3.77, 1.48, 6.2]}
        scale={0.46}
      />
      <mesh
        geometry={nodes.Cube001.geometry}
        material={materials.Stand}
        position={[3.77, 0.51, 6.2]}
        scale={[1.71, 0.11, 1.71]}
      />
      <mesh
        geometry={nodes.Circle003.geometry}
        material={materials.holder}
        position={[3.77, 1.48, 6.2]}
        scale={0.53}
      />
      <mesh
        geometry={nodes.Cube005.geometry}
        material={nodes.Cube005.material}
        position={[5.33, 1.11, 0]}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.71}
      />
      <mesh
        geometry={nodes.Cube006.geometry}
        material={nodes.Cube006.material}
        position={[5.33, 1.11, 0]}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.71}
      />
      <mesh
        geometry={nodes.Circle009.geometry}
        material={nodes.Circle009.material}
        position={[5.85, 0.69, 0.51]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.Cube007.geometry}
        material={nodes.Cube007.material}
        position={[5.49, 0.78, 0.02]}
        rotation={[1, 0.58, 0.19]}
        scale={[0.04, 0.04, 0.02]}
        ref={amp_wiper}
      />
      <mesh
        geometry={nodes.Cube009.geometry}
        material={nodes.Cube009.material}
        position={[5.33, 1.1, -2.03]}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.71}
      />
      <mesh
        geometry={nodes.Cube010.geometry}
        material={nodes.Cube010.material}
        position={[5.49, 0.77, -2.03]}
        rotation={[0.881, 0.49, 0.37]}
        scale={[0.04, 0.04, 0.02]}
        ref={volt_wiper}
      />
      <mesh
        geometry={nodes.Plane.geometry}
        material={materials.Battery}
        position={[0, 1, 7.07]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.6}
      />
      <mesh
        geometry={nodes.Cube012.geometry}
        material={materials.Ammeter}
        position={[5.33, 1.11, -2.02]}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.71}
      />
      <mesh
        geometry={nodes.Cube004.geometry}
        material={nodes.Cube004.material}
        position={[5.33, 1.11, 0]}
        rotation={[-Math.PI, 0, -Math.PI]}
        scale={0.71}
      />
      <mesh
        geometry={nodes.Circle012.geometry}
        material={nodes.Circle012.material}
        position={[5.85, 0.69, 0.51]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.Circle013.geometry}
        material={materials.negetive_terminal_voltmeter}
        position={[5.85, 0.69, -0.49]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.Circle014.geometry}
        material={materials.positive_terminal_voltmeter}
        position={[5.85, 0.69, 0.51]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.Circle016.geometry}
        material={nodes.Circle016.material}
        position={[5.85, 0.69, 0.51]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.Circle017.geometry}
        material={materials.Positive_terminal_Ammeter}
        position={[5.85, 0.69, -1.5]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.Circle018.geometry}
        material={materials.Negetive_terminal_Ammeter}
        position={[5.85, 0.69, -2.53]}
        scale={0.06}
      />
      <mesh
        geometry={nodes.BezierCurve002.geometry}
        material={materials.Resistance_Wire}
        position={[5.98, 0.79, -2]}
        rotation={[0, -1.54, Math.PI]}
        scale={[1, 1, 1]}
      />
      <mesh
        geometry={nodes.Cube002.geometry}
        material={materials.Table}
        position={[0, 0.08, 2.47]}
        scale={[6.79, 0.29, 6.79]}
        // material-color={snap.items.Table}
      />
      <mesh
        geometry={nodes.BezierCircle.geometry}
        material={materials.Current_carring_Wire}
        position={[-2.24, 2.05, -2.63]}
        scale={9.83}
      />
      <mesh
        geometry={nodes.Cube003.geometry}
        material={nodes.Cube003.material}
        position={[0, 1, 7.35]}
        scale={0.63}
      />
      <mesh
        geometry={nodes.Circle004.geometry}
        material={materials.Negetive_Terninal_battery}
        position={[-0.43, 0.59, 7]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.03}
      />
      <mesh
        geometry={nodes.Circle005.geometry}
        material={materials.Positive_terminal_Battery}
        position={[0.42, 0.59, 7]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.03}
      />
      <mesh
        geometry={nodes.Circle006.geometry}
        material={materials.Knob}
        position={[0.01, 0.78, 7.02]}
        rotation={[Math.PI / 2, -10.7, 0]}
        scale={0.06}
        ref={Knob}
      />
      <mesh
        geometry={nodes.Circle007.geometry}
        material={nodes.Circle007.material}
        position={[0.41, 1.12, 7.06]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.03}
      />
      <mesh
        geometry={nodes.Circle008.geometry}
        material={materials.Switch}
        position={[0.43, 1.12, 7.05]}
        rotation={[69.3, 0, 0]}
        scale={-0.01}
        ref={Switch}
      />
      <mesh
        geometry={nodes.Cube011.geometry}
        material={materials.Screen_battery}
        position={[0, 1, 7.06]}
        scale={0.63}
      />
    </group>
  );
}

useGLTF.preload(glbFileURL);

export default function Ohm() {
  return (
    <>
      <div className="w-screen h-screen">
        <Canvas camera={{ position: [10, 2, 1], fov: 69 }}>
          <color attach="background" args={["#050505"]} />
          <OrbitControls />
          <ambientLight position={(-3, 6, -20)} />
          <directionalLight position={(-25, 6, -20)} />
          {/* <Suspense fallback={<Box />}> */}
          <Suspense fallback={<ProgressLoader />}>
            <Model position={(0, 0, -2)} />
          </Suspense>
        </Canvas>
      </div>
    </>
  );
}
